
- important: blur, shadow, 2d projection, perspective projection, contrast, gamma, brightness, saturation, grayscale

- bitmaps: vflip, hflip, crop, tile
- downsampling: dithering, quantization
- projection:
	- scale up/down (linear, bilinear, bicubic, spline, lanczos), rotate (wrap, smooth), stretch, skew
	- perspective
- distortions: mesh-based warp (envelope tool, lens), wave, twist, shake, ripple
- effects: blur (split, gaussian), sharpen, antialias, solorize, posterize, emboss
- blending: porter-duff modes
- color: brightness, contrast, gamma, hue, stauration, invert

- antialiasing gamma adjustment at primitive level
- rendering modes: full, solid, outline, wireframe

rasterizer:
- gradients: linear, radial, radial focus, conic, conic angle, diamond, xy, sqrt xy, contour, auto contour, gouraud shading


--2d path vertex pipeline

The vertex pipeline:
	path_t -> simplify -> elasticize -> transform -> flatten -> gen-stroke -> clip -> write()

- inline affine transforms to be applied before flattening; they do not affect the current point
	- they may or may not affect stroke shape (think about how to express this)
	- some shapes must be transformed after flattening only in some circumstances eg. arcs & circles.

- stroke generator
	- polygon offsetting (use clipper?)
	- line join types: miter, round, bevel (use clipper?)
	- line cap types: butt, round, square, marker (another path?)
	- dash generator: dash array + offset; anything else?

- non-linear transforms
	- path-elasticize: split lines into beziers of fixed length
		- see what's faster: flattening a lot of tiny beziers or
		transforming a lot of polygon points (only if it looks good)?
	- transform functions: perspective, bilinear, envelope, twist, lens, etc.
	- other transformations from cartography? cylinder projection etc.

- hit testing: inside polygon test with different fill modes.
- polygon clipping

- shape-preserving intersections (needs split API):
	- line to arc
	- line to bezier2
	- line to bezier3

- hi-res intersections?
	- arc to arc
	- bezier to bezier
	- bezier to arc (or arc to bezier)
	-

