EASY
-----------------------------------------------------------------------
expat					needs test unit
im_*blur				make blur_demo based on cairo_player not sg_cairo_player
amanithvg			needs demo for amanithvgpanel
cairo_player		better keyboard/mouse state


IMAGE LOADING
-----------------------------------------------------------------------
bitmap            color effects: contrast, gamma, brightness, saturation, hue
bitmap            convolutions: blur, sharpen, antialias, solorize, posterize, emboss
libjpeg				finish multiscan reading; finish native conversions
libpng				finish native conversions
imagefile			review integration with whoever uses it


HARD/HIGH-LEVEL
-----------------------------------------------------------------------
path					split geometry modules and path modules; path API; path editor
svg_parser			check if it still complies with path semantics
text_editor			needs lots of work
obj_parser/loader	review with sg_gl_mesh; there are still meshes that don't load correctly


WINAPI/EASY
-----------------------------------------------------------------------
wglpanel				document
cairopanel			document
amanithvgpanel		document


SCENE GRAPHS GROOMING
-----------------------------------------------------------------------
sg_2d
sg_base
sg_cache
sg_cairo
sg_cairo_draw
sg_cairo_player
sg_cairo_trace
sg_gl
sg_gl_debug
sg_gl_mesh			broken imagefile integration
sg_gl_obj
sg_gl_player
sg_gl_shape
sg_gl_test
sg_pdf				?



-----------------------------------------------------------------------
-----------------------------------------------------------------------
-----------------------------------------------------------------------

LATER / NEEDS ABANDONING
-----------------------------------------------------------------------
opengl				opengl is dead. move everything to angle/ES2 and learn GLSL
unit					try LuaUnit https://github.com/luaforge/luaunit


LATER / NEEDS BETTER API
-----------------------------------------------------------------------
minizip				poor API (stateful and crashes, no cdata/string separation); look at python API
pformat				merge in pp?
pp						poor API; slow on expat.treeparse output; doesn't sort keys = not binary stable; make it indent by default


LATER / MORE BINDINGS
-----------------------------------------------------------------------
time.lua 			review it and add it (and embed or remove xsys)
tar					finish it, read + write; tests
bmp_parser        finish it; tests; demo
sqlite				many ffi bindings available; choose one
fbclient				finish it. isn't firebird dead yet? :)
postgres/libpq ?	see https://raw.github.com/malkia/ufo/master/ffi/pq.lua
re2/re2win/cre2   re2 is mighty bloated and doesn't compile on windows natively (there's a port)
bzip2					see https://github.com/malkia/ufo/blob/master/ffi/bz2.lua
lzma
md5, sha1, sha256 in Lua
vlc					plain C, no wrapper
an image library:
	- IM: http://www.tecgraf.puc-rio.br/im/
	- OpenCV, DevIL etc.
event polling libraries? turbo-lua?
lrexlib http://math2.org/luasearch/rex.html ?
luaInterface (.NET): http://code.google.com/p/luainterface/
luaCOM
CLucene


LATER / FFI CDATA BUFFERS VS STRINGS
-----------------------------------------------------------------------
- we want parsers and formatters written in Lua to work on both cdata buffers and strings.
- parsers work on reader interfaces that load buffers or return strings.
- but parsing utilities work on strings so we must copy buffers into strings first.
	- can't find/match/gsub on cdata buffers
		- we could ffi-bind re2 and use that
		- we could write iterative scanners based on string.h
	- can't tonumber on cdata buffers
		- strtoul in Lua: https://github.com/Wiladams/LAPHLibs/blob/master/strtoul.lua
		- strtol is in stdlib but requires dynamic allocation for error reporting
	- can't struct.unpack on cdata buffers
		- struct.unpack is good for binary data of specific endianness and for mixing fixed and variable fields
			- ffi.abi'le' and bit.bswap can be used for 32bit ints, but there's no equivalent for 16bit ints
			- pointer arithmetic and casting can be used to walk a mixed fixed+variable structure.
	- can't lpeg on cdata buffers
		- lpeg can't work with partial input anyway.
- formatting utilities work on strings also:
	- can't string.format on cdata buffers
		- sprintf is in stdio.h (differences from string.format?)
	- can't struct.pack on cdata buffers
- ffi bindings happily accept cdata buffers as well as strings for const input.
- ffi bindings would rather write binary output to cdata buffers instead of returning strings.
	- the consumer might be able to use a buffer as input; if unable, it's a simple matter of calling ffi.string().
	- yet this must only happen for binary buffers, while names and such are expected to be strings.


LATER / STREAMS
-----------------------------------------------------------------------
stdio				no error reporting; not documented (used by nanojpeg and obj_loader)
- we want all parsers to only work on reader interfaces that return a cdata, size pair or a string.
	- tier1: expat, libjpeg, libpng, zlib, libb64, md5, sha2
		- tier2: svg_parser, obj_parser


LATER / URI, SOCKET LOOPS, HTTP PARSER & CLIENT
-----------------------------------------------------------------------
uri					todo: absolute_path, absolute_uri, multiple values on the same key => array of values
http					review/test; body writer/formatter
http_client			unfinished: needs i/o api from connect
http_date
http_headers		needs test unit
readbuffer			finish it (reimplement based on cdata?)
socketloop
socketloop_coro
socketloop_dummy
socketreader
curl? http://luacurl.luaforge.net/
c http_parser? https://github.com/Wiladams/LJIT2Http_Parser


LATER / WINAPI
-----------------------------------------------------------------------
winapi				change oo system; document it


LATER / LUA FOR SCRIPTING
-----------------------------------------------------------------------
bash pros:
	- concise:
		- globbing
		- pipe operator
		- background operator
		- arg. expansions
bash cons:
	- spawns a process for just about everything
	- unsafe and error prone for almost everything
	- operations on strings and data structures suck big time
what's needed:
	- getopt
	- globbing (why, if we already have pattern matching? '.' is '?' and '.-' is '*')
	- input + output pipes with lanes and coroutines
	- list dirs and files
	- standard sources and sinks for pipes: files, strings, gzip
	- smarties like tee etc.
	- exec in background and get a process handle
	- wait on a list of process handles
	- kill a process
	- list processes
	- find files
	- mv, cp, ln, mkdir, rm, chmod, chown
	- status routines: netstat, mount, du, df, lsmod, ps etc.
